# 주문 서비스 application.yml

server:
  port: 8091 # Docker Compose에서 8091:8091로 매핑됨

spring:
  application:
    name: order-service # 서비스 이름 지정

  datasource:
    # Docker 환경에서는 SPRING_DATASOURCE_URL 환경 변수 값 사용
    # 로컬 환경에서는 기본값 jdbc:postgresql://localhost:5432/orderdb 사용
    url: ${SPRING_DATASOURCE_URL:jdbc:postgresql://localhost:5432/orderdb}
    # Docker 환경에서는 SPRING_DATASOURCE_USERNAME 환경 변수 값 사용
    # 로컬 환경에서는 기본값 orderuser 사용
    username: ${SPRING_DATASOURCE_USERNAME:orderuser}
    # Docker 환경에서는 SPRING_DATASOURCE_PASSWORD 환경 변수 값 사용
    # 로컬 환경에서는 기본값 orderpass 사용
    password: ${SPRING_DATASOURCE_PASSWORD:orderpass}
    driver-class-name: org.postgresql.Driver

  jpa: # JPA 설정 예시
    hibernate:
      ddl-auto: update # 테스트용. 운영 시에는 migrate 도구 사용 권장
    show-sql: true # 개발/테스트 시 유용
    properties:
      hibernate:
        format_sql: true

  kafka:
    # Docker 환경에서는 SPRING_KAFKA_BOOTSTRAP_SERVERS 환경 변수 값 사용
    # 로컬 환경에서는 기본값 localhost:9092 사용
    bootstrap-servers: ${SPRING_KAFKA_BOOTSTRAP_SERVERS:localhost:9092}

  cloud:
    stream:
      kafka:
        binder:
          # Kafka 바인더 브로커 주소는 spring.kafka.bootstrap-servers 속성 값을 참조
          brokers: ${spring.kafka.bootstrap-servers}
          # properties:
          #   configuration:
          #     # 컨슈머 및 프로듀서 공통 속성
      bindings:
        # '주문 생성 이벤트' 발행을 위한 Output Binding (StreamBridge 또는 Supplier 빈 이름과 매핑)
        # 예: StreamBridge를 사용한다면 streamBridge.send("orderCreatedEvent-out-0", event)
        orderCreatedProducer-out-0:
          destination: order-created # 발행할 카프카 토픽 이름 (결제 서비스의 Input destination과 일치해야 함)
          contentType: application/json # 메시지 컨텐츠 타입 (직렬화 방식과 일치)
        # '결제 결과 이벤트' 소비를 위한 Input Binding (Consumer 빈 이름과 매핑)
        # 예: @Bean Consumer<PaymentResultEvent> paymentResultEventConsumer()
        paymentResultConsumer-in-0: # 새로운 입력 바인딩
          destination: payment-result # 소비할 카프카 토픽 이름 (결제 서비스의 Output destination과 일치해야 함)
          group: order-payment-result-group # 이 컨슈머가 속할 컨슈머 그룹 이름 (동일 토픽을 여러 서비스가 소비 시 그룹 이름은 각 서비스별로 달라야 함)
          # kafka.consumer.properties: # 추가 Kafka 컨슈머 속성
          #   auto.offset.reset: earliest # 또는 latest (오프셋이 없을 때 시작 위치)
          consumer:
            configuration:
              auto.offset.reset: earliest
              key.deserializer: org.apache.kafka.common.serialization.StringDeserializer
              value.deserializer: org.springframework.kafka.support.serializer.JsonSerializer
              spring.json.trusted.packages: com.localy.payment_service.payment.message.dto # PaymentResultEvent 패키지 경로 추가
    function:
      definition: orderCreatedProducer;paymentResultConsumer

# 다른 서비스 주소 설정 (예: 결제 서비스)
# Docker 환경에서는 PAYMENT_SERVICE_URL 환경 변수 값 사용
# 로컬 환경에서는 기본값 http://localhost:8092 사용
payment:
  service:
    url: ${PAYMENT_SERVICE_URL:http://localhost:8092}

# 사용자 서비스 주소 (필요하다면 추가)
# user:
#   service:
#     url: ${USER_SERVICE_URL:http://localhost:9001}
