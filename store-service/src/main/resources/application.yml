server:
  port: 8071
  netty:
    connection-timeout: 2s
    idle-timeout: 15s
  shutdown: graceful

# application.yml 에 추가 또는 수정
spring:
  r2dbc:
    # Docker 환경에서는 SPRING_R2DBC_URL 환경 변수 값 사용
    # 로컬 환경에서는 기본값 r2dbc:postgresql://localhost:5434/storedb 사용
    url: ${SPRING_R2DBC_URL:r2dbc:postgresql://localhost:5434/storedb}
    # Docker 환경에서는 SPRING_R2DBC_USERNAME 환경 변수 값 사용
    # 로컬 환경에서는 기본값 localyuser 사용
    username: ${SPRING_R2DBC_USERNAME:localyuser}
    # Docker 환경에서는 SPRING_R2DBC_PASSWORD 환경 변수 값 사용
    # 로컬 환경에서는 기본값 localypassword 사용
    password: ${SPRING_R2DBC_PASSWORD:localypassword}

    # R2DBC 커넥션 풀 설정 (선택 사항, 권장)
    pool:
      max-size: 10
      initial-size: 2
      max-idle-time: 30m # 예: 30분
      validation-query: SELECT 1 # 연결 유효성 확인 쿼리
      # 기타 풀 설정 옵션은 Spring Boot 문서 참고

  sql:
    init:
      # DDL/DML 스크립트 실행 설정 (개발 단계에서 유용)
      enabled: true # 스키마 및 데이터 스크립트 실행 활성화
      platform: postgresql # 사용할 DB 플랫폼 지정
      schema-locations: classpath:schema.sql # 스키마 스크립트 파일 경로 (src/main/resources/schema.sql)
      data-locations: classpath:data.sql # 데이터 스크립트 파일 경로 (src/main/resources/data.sql)
      continue-on-error: false # 스크립트 실행 중 오류 발생 시 중단 여부
      mode: always

# 로컬 이미지 파일 저장 관련 설정 (MenuService에서 사용)
app:
  image:
    # Docker 환경에서는 APP_IMAGE_STORAGE_LOCATION 환경 변수 값 사용 (/opt/app/images)
    # 로컬 환경에서는 기본값 ./uploads/images 사용
    storage-location: ${APP_IMAGE_STORAGE_LOCATION:./uploads/images}
    # Docker 환경에서는 APP_IMAGE_URL_PATH 환경 변수 값 사용 (/images/)
    # 로컬 환경에서는 기본값 /images/ 사용
    url-path: ${APP_IMAGE_URL_PATH:/images/}
