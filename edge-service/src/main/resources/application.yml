server:
  port: 9000
  netty:
    connection-timeout: 2s
    idle-timeout: 15s
  shutdown: graceful

spring:
  application:
    name: edge-service
  lifecycle:
    timeout-per-shutdown-phase: 15s
  config:
    import: "optional:configserver:"
  cloud:
    config:
      uri: http://localhost:8888
      request-connect-timeout: 5000 # 5s
      request-read-timeout: 5000 # 5s
      fail-fast: false # In production, set to true
      retry:
        max-attempts: 6
        initial-interval: 1000 # 1s
        max-interval: 2000 # 2s
        multiplier: 1.1
    gateway:
      httpclient:
        connect-timeout: 5000 # 2s
        response-timeout: 20s
        pool:
          type: elastic
          max-idle-time: 15s
          max-life-time: 60s
      default-filters:
        - SaveSession
        - TokenRelay
#        - name: RequestRateLimiter
#          args:
#            redis-rate-limiter:
#              replenishRate: 10
#              burstCapacity: 20
#              requestedTokens: 1
        - name: Retry
          args:
            retries: 3
            methods: GET
            series: SERVER_ERROR
            exceptions: java.io.IOException, java.util.concurrent.TimeoutException
            backoff:
              firstBackoff: 50ms
              maxBackOff: 500ms
              factor: 2
              basedOnPreviousValue: false
      routes: # 개별 라우트 정의 목록
        # 기존 User Service Route
        - id: user-service-route # 라우트 고유 ID
          uri: ${USER_SERVICE_URL:http://localhost:9001} # 요청을 포워딩할 대상 서비스 주소 (환경 변수 사용, 기본값은 localhost:9001)
          predicates: # 어떤 요청이 이 라우트로 매칭될지 조건 정의
            - Path=/api/users/** # /api/users/ 로 시작하는 모든 경로에 매칭
          filters: # 이 라우트에만 적용될 필터
            - name: CircuitBreaker # 서킷 브레이커 필터
              args:
                name: userCircuitBreaker
                fallbackUri: forward:/user-fallback # 서킷 오픈 또는 예외 발생 시 포워딩될 경로
            - RemoveRequestHeader=Cookie # 쿠키 헤더 제거 필터
            - TokenRelay # 이 라우트에도 토큰 릴레이 필터 적용 (기본 필터 외 개별 설정)
        # Cart Service Route
        - id: cart-service-route # 라우트 고유 ID
          uri: ${CART_SERVICE_URL:http://localhost:8090} # 장바구니 서비스 주소 및 포트 (localhost:8090)
          predicates: # 매칭 조건
            - Path=/api/carts/** # /api/carts/ 로 시작하는 모든 경로에 매칭
        # Order Service Route
        - id: order-service-route # 라우트 고유 ID
          uri: ${ORDER_SERVICE_URL:http://localhost:8091} # 주문 서비스 주소 및 포트 (localhost:8091)
          predicates: # 매칭 조건
            - Path=/api/orders/** # /api/orders/ 로 시작하는 모든 경로에 매칭
        # Payment Service Route
        - id: payment-service-route # 라우트 고유 ID
          uri: ${PAYMENT_SERVICE_URL:http://localhost:8092} # 결제 서비스 주소 및 포트 (localhost:8092)
          predicates: # 매칭 조건
            - Path=/api/payments/** # /api/payments/ 로 시작하는 모든 경로에 매칭 (향후 결제 서비스 컨트롤러 경로에 맞게 수정 필요)

  security:
    oauth2:
      client:
        registration:
          keycloak:
            client-id: edge-service
            client-secret: edge-secret
            authorization-grant-type: authorization_code
            redirect-uri: "${BASE_URL:http://localhost:9000}/login/oauth2/code/{registrationId}"
            scope:
              - openid
              - profile
              - email
        provider:
          keycloak:
            issuer-uri: http://localhost:8080/realms/localy
      resourceserver:
        jwt:
          issuer-uri: http://localhost:8080/realms/localy
  redis:
    connect-timeout: 5s
    host: ${SPRING_REDIS_HOST:localhost}
    port: 6379
    timeout: 1s

  session:
    store-type: redis
    timeout: 10m
    redis:
      namespace: polar:edge

resilience4j:
  circuitbreaker:
    configs:
      default:
        slidingWindowSize: 50
        permittedNumberOfCallsInHalfOpenState: 5
        failureRateThreshold: 70
        waitDurationInOpenState: 30000
  timelimiter:
    configs:
      default:
        timeoutDuration: 5s

#logging:
#  level:
#    io.github.resilience4j: DEBUG
logging:
  level:
    # Spring Security 전반 로깅 레벨 조정
    org.springframework.security: DEBUG
    # OAuth2 Resource Server 관련 로깅 레벨 조정
    org.springframework.security.oauth2: DEBUG

    io.github.resilience4j: DEBUG